// 함수(Function)
// 입력을 받아 출력을 하는 일련의 과정을 정의한 것
// 모듈화

// 함수 선언식
// a, b 매개변수=파라미터는 외부로부터 입력받은 값을 저장하는 변수
// 파라미터라는 위치 자체에 있기때문에 선언하지 않고 바로 적는다. 

// **왜 function 키워드는 변수 선언이 필요 없을까?**
// function 키워드는 **선언과 할당**을 동시에 처리합니다. 
// 자바스크립트 엔진이 function 키워드를 만나면, 
// 함수 이름(sayHello)을 식별자로 삼아 해당 함수 객체를 메모리에 생성하고 연결합니다. 
// 이는 변수 선언과 값 할당이 한 번에 이루어지는 과정과 유사합니다.

// 함수 호출 (Function Call):
// 함수 이름 뒤에 괄호 ()를 붙여서 사용한다. 
// 예를 들어 sayHello();

// 함수의 호출과 메모리
// 함수는 호출될 때마다 독립적으로 작동합니다. 

// 이는 함수를 일종의 **'일회용 작업 공간'**이라고 생각하면 이해하기 쉽습니다. 
// 작업이 필요할 때마다 새로운 공간을 만들고, 작업이 끝나면 깨끗하게 치워서 없애버리는 것과 같다.
// 따라서 sayHello();를 여러 번 호출하면, 호출할 때마다 새로운 실행 컨텍스트가 생성됨.
// "Hello!"를 출력한 뒤 사라지는 과정이 반복됩니다.

function fnc1(a, b) {
  return a + b;
}
// 인수 (Argument) : 함수를 호출할 때 전달해주는 값
let resultFnc1 = fnc1(1, 2);
console.log(resultFnc1);
console.log(fnc1(2, 3));

// return 출력하고 되돌려준다. break 문처럼 써도 괜찮다. 

// 함수 선언식 :  호이스팅에 영향을 받는다. 
// 재할당이 가능하므로, 함수명이 중복되지 않도록 조심해야된다. 
function fnc3(a, b) {
  return a + b;
}
function fnc3(a, b) {
  return a + b -9999;
}

console.log(fnc3(1, 2));

// 함수 표현식 : 호이스팅에 영향을 받지 않는다. 
// 재할당이 불가능하다. const로 잡았기때문에 
const fnc4 = function(a, b) {
  return a + b;
}

fnc4(1, 3);

// 화살표 (=> 화살표 모양이라서 ㅋ) 함수 (더 간단해짐)
const fnc5 = (a, b) => a + b;

//  fnc6랑 fnc7가 같은 코드
// const fnc6 = function(a) {
//   let test = a / 2;
//   return test;
// }

// const fnc7 = a => {
//   let test = a / 2;
//   return test;
// }

// 콜백 함수
// 다른 함수의 파라미터로 전달되어서 특정 조건에 따라 호출되는 함수

function myChk(callback) {
  callback();
}


// 익명 함수 - 단발성으로 사용할 때 쓸 수 있다. 
myChk(() => console.log('콜백함수'));


// 함수와 if문의 실행 흐름 차이
// 함수: 명령을 기다리는 코드 블록
// function test() { ... }는 정의만 된 상태입니다.

// 이 코드 블록은 프로그램의 실행 흐름을 멈추거나 방해하지 않고 그냥 지나갑니다.

// console.log(x);와 같은 내부 코드가 실행되려면, 반드시 test();라는 **명령(호출)**이 필요합니다.

// 호출 명령이 있을 때만 엔진이 함수 안으로 들어가 코드를 실행합니다.

// if문: 조건에 따라 즉시 실행되는 코드 블록
// if (true) { ... }는 정의만 하는 것이 아니라, 프로그램의 실행 흐름에 포함됩니다.

// 엔진이 if문을 만나면, 즉시 괄호 안의 조건을 평가합니다.

// 조건이 true이므로, 엔진은 {} 안의 코드를 즉시 실행합니다. 별도의 호출 명령이 필요 없습니다.

// 이후 프로그램의 실행 흐름은 if문 밖으로 계속 이어집니다.

